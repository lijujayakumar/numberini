// D denots Number between 0-9, 
// xx denots the occurances of D, for example D3 repersents, and 3 digit number like 123
// + repersents a SPACE, D2+D1 denots a two digit number follwed by a SPACE and another digit (12 3)
// - used as-is, for example 471-123456 can be repersetned by D3-D6
const patterns = [
"D10", 
"D11", 
"D12",
"D5+D5",
"D5++D5",
"D7+D3", 
"D7-D3", 
"D3+D4+D3",
"D4+D3+D3",
"D3+D3+D4",
"D2+D2+D2+D2+D2",
"D4+D2+D2+D2",
"D2+D2+D4+D2",
"D2+D4+D4",
"D1+D1+D1+D1+D1+D1+D1+D1+D1+D1",
"D2+D2+D2+D4",
"D4+D4+D2",
"D8+D2",
"D2+D8",
"D4+D2+D4",
"D6+D4",
"D4+D6",
"D4+D1+D2+D3",
"D4+D1+D3+D2",
"D6+D2+D2",
"D3+D2+D2+D3",
"D3+D3+D3+D1",
"D2+D2+D1+D5",
"D5+D1+D2+D2",
"D5+D2+D1+D2",
"D5+D2+D2+D1",
"D7+D2+D1",
"D7+D1+D2",
"D2+D3+D3+D2",
];

const cleanupList = [
  {
    originalText: "S",
    replaceText: 5,
  },
  {
    originalText: "�",
    replaceText: "",
  },
  {
    originalText: "O",
    replaceText: 0,
  },
  {
    originalText: "l",
    replaceText: 1,
  },
  {
    originalText: "%",
    replaceText: 8,
  },
];

const resultSettings = {
  predictProviderName: true,
  autoGenerateNumbers: true,
  autoGenerateDigits: 2,
  removeResultsFromInput: false,
  removeDuplicates: true,
  removeDuplicatesWithCountryCode: true,  // 123, +91 123 will treat as duplicate
  uniqueNumberEnforceRange: 5,            // In the First {5} numbers    
  uniqueNumberThreshold: 3,               // Atleast {3} digits has to be unique
  enforceUniqueNumberThreshold: true,
};

const testData = [
  "1234567890",
  "12345678901",
  "123456789012",
  "12345 67890",
  "12345  67890",
  "1234567 890",
  "1234567-890",
  "123 4567 890",
  "1234 567 890",
  "123 456 7890",
  "911234567890",
  "1114567890",
  "1111567890",
  "1111567890",
  "SOL%�123456",
  "9895012345"
 ]
 